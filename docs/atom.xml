<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Ben Linsay</title>
    <link rel="self" type="application/atom+xml" href="https://blinsay.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blinsay.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-11-24T00:00:00+00:00</updated>
    <id>https://blinsay.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Map Keys and Lifetimes</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/compound-keys/"/>
        <id>https://blinsay.com/blog/compound-keys/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/compound-keys/">&lt;p&gt;I ran into a weird complexity cliff with Rust&#x27;s &lt;code&gt;HashMap&lt;&#x2F;code&gt; and lifetimes
the other day. It&#x27;s enough of a head scratcher that I thought I&#x27;d write it
up and see if anyone on the broader internet knew what was going on.&lt;&#x2F;p&gt;
&lt;p&gt;The rest of this post assumes you&#x27;re comfortable enough with Rust to
see some moderately complicated lifetimes and understand what&#x27;s going on.
You don&#x27;t need a perfect mental model of the borrow checker.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;&#x2F;code&gt; and &lt;code&gt;BTreeMap&lt;&#x2F;code&gt; are pretty darn good and I use them a lot. Suppose
you&#x27;re me and you&#x27;re &lt;a href=&quot;https:&#x2F;&#x2F;junctionlabs.io&quot;&gt;making some HTTP requests&lt;&#x2F;a&gt; and
you want to track some request stats by host and port. It&#x27;s pretty easy and
boring to do that with a &lt;code&gt;HashMap&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bender = Host { hostname: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bender&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;666 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; host_stats = HashMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;    host_stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        bender.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        Stats { sent: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, errors: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(
&lt;&#x2F;span&gt;&lt;span&gt;        host_stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;bender),
&lt;&#x2F;span&gt;&lt;span&gt;        Some(&amp;amp;Stats { sent: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, errors: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;}),
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Debug, PartialEq, Eq, Hash)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Host {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Stats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now suppose you&#x27;re me and you&#x27;re trying to wrap stats up with some other state
or just want to hide it behind a reasonable interface because we live in a
society. I&#x27;m not trying to write &lt;code&gt;HashMap&amp;lt;(String, u16), Stats&amp;gt;&lt;&#x2F;code&gt; everywhere,
and I also don&#x27;t want people to have to see &lt;code&gt;Host&lt;&#x2F;code&gt; to use this code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;HostStats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stats&lt;&#x2F;span&gt;&lt;span&gt;: HashMap&amp;lt;Host, Stats&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;HostStats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&amp;amp;Stats&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;Host{
&lt;&#x2F;span&gt;&lt;span&gt;            hostname: hostname.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            port,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host = Host {
&lt;&#x2F;span&gt;&lt;span&gt;            hostname,
&lt;&#x2F;span&gt;&lt;span&gt;            port,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(host, Stats { sent, errors });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, suppose you&#x27;re me and you&#x27;re suddenly annoyed that we can&#x27;t look up host
with just a reference in &lt;code&gt;get&lt;&#x2F;code&gt; - we have to copy the entire string (&lt;code&gt;hostname.to_string()&lt;&#x2F;code&gt;)
to build an owned &lt;code&gt;Host&lt;&#x2F;code&gt; and then immediately take a reference to it to look
up a key.&lt;&#x2F;p&gt;
&lt;p&gt;My first thought here was to define a key-reference type that can be compared
to &lt;code&gt;Host&lt;&#x2F;code&gt; but doesn&#x27;t own a hostname. &lt;code&gt;HashMap&lt;&#x2F;code&gt; had other ideas. Take a look at
the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;hash_map&#x2F;struct.HashMap.html#method.get&quot;&gt;signature of &lt;code&gt;get&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;;
it allows you to do a lookup with any key type &lt;code&gt;Q&lt;&#x2F;code&gt; that can be borrowed as if
it was a &lt;code&gt;K&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Q&amp;gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Q) -&amp;gt; Option&amp;lt;&amp;amp;V&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    K: Borrow&amp;lt;Q&amp;gt; + Ord,
&lt;&#x2F;span&gt;&lt;span&gt;    Q: Hash + Eq + ?Sized;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try to do what I tried first, you end up being unable to write a useful
implementation of &lt;code&gt;Borrow&lt;&#x2F;code&gt;. There&#x27;s no way to return a &lt;code&gt;&amp;amp;HostRef&lt;&#x2F;code&gt; here without
referencing a temporary value AND there is no way to express the appropriate
lifetime constraint without conflicting with the signature of the &lt;code&gt;Borrow&lt;&#x2F;code&gt;
trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;HostRef&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::borrow::Borrow&amp;lt;HostRef&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Host {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;HostRef {
&lt;&#x2F;span&gt;&lt;span&gt;        todo!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;good luck&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The fundamental problem with that approach is trying to express that &lt;code&gt;hostname&lt;&#x2F;code&gt;
can either be borrowed or owned, and it shouldn&#x27;t make a difference. If only
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot;&gt;there was a way to express that&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Having a &lt;code&gt;Cow&lt;&#x2F;code&gt; &lt;em&gt;almost&lt;&#x2F;em&gt; works, man.&lt;&#x2F;p&gt;
&lt;p&gt;When inserting and get a key, things compile. We can use &lt;code&gt;Cow&amp;lt;&#x27;static, str&amp;gt;&lt;&#x2F;code&gt;
to express that we&#x27;re only going to keep owned keys in the HashMap and keep
explicit lifetime annotations from becoming viral.&lt;&#x2F;p&gt;
&lt;p&gt;Howerever, there are some lifetime shenanigans necessary in the signature of
&lt;code&gt;get&lt;&#x2F;code&gt; - we seem to have have to tell the borrow checker that the borrowed
hostname will live at least as long as &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; and the output value.
Intuitively that restriction doesn&#x27;t make much sense to me - &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;blen.blinsay.com&quot;&gt;get in touch&lt;&#x2F;a&gt; if it
makes sense to you.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::borrow::Cow;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Debug, PartialEq, Eq, Hash)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Host&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Stats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;HostStats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stats&lt;&#x2F;span&gt;&lt;span&gt;: HashMap&amp;lt;Host&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Stats&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;HostStats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;b str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Stats&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host = Host {
&lt;&#x2F;span&gt;&lt;span&gt;            hostname: Cow::from(hostname),
&lt;&#x2F;span&gt;&lt;span&gt;            port,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;host)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host = Host {
&lt;&#x2F;span&gt;&lt;span&gt;            hostname: Cow::from(hostname),
&lt;&#x2F;span&gt;&lt;span&gt;            port,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(host, Stats { sent, errors });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When writing the code that inspired this post, I ended up needing something like
&lt;code&gt;try_record&lt;&#x2F;code&gt; - update stats if they were present, but do nothing if that host
was absent.&lt;&#x2F;p&gt;
&lt;p&gt;That extra level of complexity seems to confuse the borrow checker badly enough
that the code doesn&#x27;t compile any more. I&#x27;m not sure exactly why, but trying to
define that method makes rustc so mad that it gives you &lt;code&gt;error[E0521]: borrowed data escapes outside of method&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;HostStats {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;try_record&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host = Host {
&lt;&#x2F;span&gt;&lt;span&gt;            hostname: Cow::from(hostname),
&lt;&#x2F;span&gt;&lt;span&gt;            port,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(stats) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.stats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;host) {
&lt;&#x2F;span&gt;&lt;span&gt;            stats.sent = sent;
&lt;&#x2F;span&gt;&lt;span&gt;            stats.errors = errors;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you understand this one, &lt;strong&gt;please&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;blen.blinsay.com&quot;&gt;get in touch&lt;&#x2F;a&gt;. I&#x27;m extremely curious! The
code is &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=61597cab54b5fbb373b44ba2cde6c6ee&quot;&gt;on the playground&lt;&#x2F;a&gt;
if you&#x27;d like to mess with it yourself.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I ended up working through this problem by working around it; the compound key
lookup didn&#x27;t end up being important to my problem. If it had been, I would
have taken the excellent suggestion to use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hashbrown&#x2F;0.15.1&#x2F;hashbrown&#x2F;index.html&quot;&gt;hashbrown&lt;&#x2F;a&gt;
crate directly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;hashbrown&lt;&#x2F;code&gt; gives you two ways out of this - &lt;code&gt;get&lt;&#x2F;code&gt; is defined in terms of an
&lt;code&gt;Equivalent&lt;&#x2F;code&gt; trait instead of &lt;code&gt;Borrow&lt;&#x2F;code&gt; and, if you really need it, the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hashbrown&#x2F;0.15.1&#x2F;hashbrown&#x2F;struct.HashMap.html#method.raw_entry_mut&quot;&gt;raw entry API&lt;&#x2F;a&gt;
is right there.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Two Kinds of Problems</title>
        <published>2024-09-04T00:00:00+00:00</published>
        <updated>2024-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/two-kinds-of-problems/"/>
        <id>https://blinsay.com/blog/two-kinds-of-problems/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/two-kinds-of-problems/">&lt;p&gt;I tend to think about hard problems as being in one of two broad categories:
easy to ask and difficult to answer, or difficult to ask and easy to answer. Not
all problems fall onto this spectrum, but I think it&#x27;s a useful framework for
orienting yourself when confronting something new.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The first category is iceberg-shaped: easy to ask questions with deep,
complicated, and disgusting answers lurking below the surface. Sometimes the
answer requires knowledge from an adjacent field or simply just brute forcing
your way through.&lt;&#x2F;p&gt;
&lt;p&gt;Databases and storage software are a perfect example. You start by asking the
computer to read back exactly the bytes you wrote (how hard could it be) and
before you know it you&#x27;re learning about SSD wear patterns, you have opinions
about Paxos papers, and you are probably doing something awful to make sure that
you are &lt;em&gt;actually&lt;&#x2F;em&gt; calling fsync when you think you are calling fsync. Maybe you
even waded into the whole &lt;code&gt;mmap&lt;&#x2F;code&gt; debate, who knows.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The second category is an inverted pyramid - all of the work is frontloaded in
the asking itself. Every follow up question asks even more follow-up questions,
until you&#x27;re not sure what you were even asking for in the first place.
But, once you finally figure out precisely the right framing of the original
question, the answer turns out to fall right into place.&lt;&#x2F;p&gt;
&lt;p&gt;Networking and orchestration problems tend to fall into this category, with
service discovery being an excellent example. The answer is going to be &amp;quot;pick an
IP address out of a list&amp;quot; or &amp;quot;set up a DNS A record&amp;quot;, but before you can figure
out how to look up that address, you have to sit down and decide what addresses
are even going to be in that list. Do you only include healthy hosts, and if so
where do you measure health from? How do you define healthy? Should you tailor
the list to each caller based on where they are? You &amp;quot;just&amp;quot; wanted to populate
your DNS server, and now you&#x27;re on the hook for defining failure domains for
your entire organization. Oops.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing CVM For Fun and Fun</title>
        <published>2024-05-28T00:00:00+00:00</published>
        <updated>2024-05-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/cvm/"/>
        <id>https://blinsay.com/blog/cvm/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/cvm/">&lt;p&gt;There&#x27;s been &lt;a href=&quot;https:&#x2F;&#x2F;www-cs-faculty.stanford.edu&#x2F;~knuth&#x2F;papers&#x2F;cvm-note.pdf&quot;&gt;a new Knuth paper&lt;&#x2F;a&gt; about a distinct-values sketch floating around my corner of the internet. Despite having not interacted with a sketch professionally in quite a long time, sketches are still &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y3fTaxA8PkU&quot;&gt;near and dear to my heart&lt;&#x2F;a&gt; and this felt like a fun opportunity to implement something new.&lt;&#x2F;p&gt;
&lt;p&gt;For the unfamiliar, probabilistic sketching is cheating at data structures by using statistics. In return for accepting some amount of error, usually a bounded amount, you get to break what feel like fundamental laws of computer science. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bloom_filter&quot;&gt;Bloom filters&lt;&#x2F;a&gt; are probably the most familiar sketch to software engineers, but &lt;a href=&quot;https:&#x2F;&#x2F;dmtcs.episciences.org&#x2F;3545&#x2F;pdf&quot;&gt;HyperLogLog&lt;&#x2F;a&gt; and CountMinSketch have been showing up more regularly over the last decade.&lt;&#x2F;p&gt;
&lt;p&gt;The sketch in Knuth&#x27;s note is a sketch that, like HyperLogLog, gives an estimator for the distinct element problem, aka the &amp;quot;how big is my set&amp;quot; problem. This new algorithm is interesting in that it doesn&#x27;t solve the problem with tighter bounds or while using less space or offer any improvement over HLLs and other state-of-the-art sketches. Instead, it&#x27;s intended as a teaching tool - it&#x27;s an algorithm that students can implement and can write coherent proofs about without the &lt;a href=&quot;https:&#x2F;&#x2F;mathworld.wolfram.com&#x2F;MellinTransform.html&quot;&gt;graduate level math skills&lt;&#x2F;a&gt; that are required to prove meaningful bounds on other sketches.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;At an extremely high level, CVM works by keeping a fixed-size set of elements seen. Each (non-distinct) element in the stream is paired with a randomly sampled per-element value that Knuth dubs a volatility as it arrives, and is sampled if it has a lower volatility than any other element sampled so far. To keep the size of the sampled set bounded, CVM evicts the previous element with the highest volatility. Whether or not a new element is sampled, CVM updates a parameter &lt;code&gt;p&lt;&#x2F;code&gt;, and at any point in time the size of the sampled set divided by &lt;code&gt;p&lt;&#x2F;code&gt; is an unbiased estimator of the number of unique elements in the stream.&lt;&#x2F;p&gt;
&lt;p&gt;This high-level explanation glosses over important details in the algorithm that handle edge cases and correct for sampling bias. An actual implementation is as readable and concise as any pseudocode for the algorithm would be.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Cvm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;: Treap,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Cvm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D1 - p=1, buf is empty
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            size,
&lt;&#x2F;span&gt;&lt;span&gt;            p: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            buf: Treap::new(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; u: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;= rand::thread_rng().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D4 - if B contains the pair (a, u) delete it
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D5 - if u &amp;gt;= p, bail. if there&amp;#39;s room in the
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; buffer, either because the buffer is still growing
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; to its max or the same key just got removed,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; insert the new node.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p &amp;lt;= u {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.size {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key, u);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D6 - based on the value of u, either swap the new
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; node into the buffer or update the value of p.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(key_max, u_max) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; u_max &amp;lt; u {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p = u
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key_max);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key, u);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;estimate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; at any point, D2 is a valid estimate
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only step in Knuth&#x27;s algorithm D that it doesn&#x27;t make sense to represent explicitly in code is Step D3 - sampling the next element from a stream. In practice, you&#x27;ll be doing that by processing an incoming stream of data from some external source.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Knuth&#x27;s implementation of the algorithm is &lt;a href=&quot;https:&#x2F;&#x2F;cs.stanford.edu&#x2F;~knuth&#x2F;programs&#x2F;cvm-estimates.w&quot;&gt;available as a literate program&lt;&#x2F;a&gt; alongside his note. If you&#x27;re &lt;a href=&quot;https:&#x2F;&#x2F;tug.org&#x2F;texlive&#x2F;&quot;&gt;feeling adventurous&lt;&#x2F;a&gt;, you can turn it into a stripped C file or a &lt;a href=&quot;https:&#x2F;&#x2F;blinsay.com&#x2F;blog&#x2F;cvm&#x2F;cvm-estimates.pdf&quot;&gt;rendered PDF&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Knuth&#x27;s implementation freely mixes the CVM implementation with the guts of a hash-table implementation and with all of the code for building and searching &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Treap&quot;&gt;a treap&lt;&#x2F;a&gt;. None of those details really matter for the correctness of the CVM algorithm itself. Almost all of the complexity in Knuth&#x27;s implementation seems to come from the hash table and treap code, and it obscures how simple CVM is at its core.&lt;&#x2F;p&gt;
&lt;p&gt;I spent a while staring at the treap implementation before deciding to ignore it entirely in my implementation. While the treap is extremely important to the implementation of the algorithm if you&#x27;d like it to be fast (and a very cool data structure) it has nothing to do with whether or not the implementation is correct.&lt;&#x2F;p&gt;
&lt;p&gt;Plus, it turns out that it&#x27;s fairly easy to fake a treap with a sorted array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Treap {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Node&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Treap {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ data: Vec::new() }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;k);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| e.vol &amp;lt; v);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(idx, Node { key: k, vol: v });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[i].key == k {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| (n.key, n.vol))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s certainly not the prettiest or fastest thing in the world, but it lets us go test out CVM on some real data.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To test, I ran my implementation against a stream of random numbers generated by the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rand&quot;&gt;&lt;code&gt;rand&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;&#x27;s default RNG and compared against a &lt;code&gt;HashSet&lt;&#x2F;code&gt; of the actual values. These tests generated elements until the HashSet hit 1,000,000 unique elements. The full implementation and test harness are available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blinsay&#x2F;cvm&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After 10 trials at each buffer size, my toy implementation appears to the naked eyeball to be close enough to Knuth&#x27;s results for &lt;code&gt;Stream A1&lt;&#x2F;code&gt; - random data - that I&#x27;m happy to call this a working implementation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;blinsay.com&#x2F;blog&#x2F;cvm&#x2F;cvm-results.svg&quot; alt=&quot;cvm-results&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Eyeballing this is as far as I went with analysis because the bounds that Knuth and the original authors prove are hard to comprehend, let alone to do napkin math about. I wouldn&#x27;t believe most practicing software engineers if they told me they could intuit how a change in CVM buffer size (Knuth&#x27;s &lt;code&gt;s&lt;&#x2F;code&gt;) changes the error. Compare that to an algorithm like HyperLogLog and its error bound of &lt;code&gt;1.04&#x2F;sqrt(m)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It really is quite astonishing that this is a good estimator. Given how simple the code is, and Knuth&#x27;s ringing endorsement, I wouldn&#x27;t be the least bit surprised if it makes it into more than a few CS textbooks.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What Knuth calls CVM is an algorithm proposed by &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2301.10191&quot;&gt;Sourav Chakraborty, N. V. Vinodchandran, and Kuldeep S. Meel&lt;&#x2F;a&gt; in a paper that explicitly targets teaching probability theory. The original paper doesn&#x27;t focus on implementation and data structures; it&#x27;s entirely focused on the math, with no ink spilled on how a practitioner might implement these algorithms - the algorithm that becomes Knuth&#x27;s CVM&#x2F;Algorithm D depends on an infinitely growing string of bits.&lt;&#x2F;p&gt;
&lt;p&gt;The original paper makes no concession to the practicing programmer, preferring to focus entirely on building up to the final algorithm in a series of proofs. Knuth&#x27;s note turns that structure on its head and starts with the final algorithm, some empirical results, and only then introduces simpler versions of the algorithm to make the proofs approachable.&lt;&#x2F;p&gt;
&lt;p&gt;In both papers, the math is still quite dense and only ends up proving fairly loose error bounds on the final algorithm. CVM seems to perform quite well in practice, and Knuth believes tighter bounds are possible. Ironically, the math has so far proven too difficult, even for Knuth. Watch out, undergraduates.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To conclude this study, I had hoped to use Theorem D to sharpen the results of Corollary T, because the actual performance of Algorithm D in practice is noticeably better than the comparatively weak theoretical guarantees that are derivable from the coarser Algorithm D. Algorithm D is quite simple, so I believed that I’d be able to analyze its behavior without great difficulty. Alas, after several weeks of trying, I must confess that I’ve failed to get much further. Indeed, I think Algorithm D may well be the simplest algorithm that lies beyond my current ability to carry out a sharp analysis!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>verytmp</title>
        <published>2024-05-06T00:00:00+00:00</published>
        <updated>2024-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/verytmp/"/>
        <id>https://blinsay.com/blog/verytmp/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/verytmp/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blinsay&#x2F;verytmp&quot;&gt;&lt;code&gt;verytmp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; came out of a previous employer&#x27;s problem with badly behaved programs that weren&#x27;t cleaning up large temporary files. Inevitably, someone who had to work with that code - and usually not the person who wrote the code! - would fill up their tempdir and spend a few minutes or hours being extremely confused about why other programs were suddenly throwing errors.&lt;&#x2F;p&gt;
&lt;p&gt;Our &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;geofft&quot;&gt;local mad scientist&lt;&#x2F;a&gt; realized that this was obviously a problem for linux namespaces, and &lt;code&gt;verytmp&lt;&#x2F;code&gt; was born. By using (abusing?) a private mount namespace, &lt;code&gt;verytmp&lt;&#x2F;code&gt; takes advantage of the fact that &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;212172&#x2F;what-happens-if-the-last-process-in-a-namespace-exits&quot;&gt;mount namespaces are garbage collected&lt;&#x2F;a&gt; to give you a fully-functional in-memory filesystem that gets cleaned up when your process exits without relying on &lt;strong&gt;any&lt;&#x2F;strong&gt; userspace code. No more full &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt;, no more strange errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blinsay&#x2F;verytmp&quot;&gt;The code is here&lt;&#x2F;a&gt;, and was a lot of fun to write. Because the goal is to create a detached mount namespace, you end up with a filesystem you can&#x27;t reference with a absolute paths, which means that your API for accessing files and directories has to look a little bit different than the usual interfaces. Instead you end up with something a lot more like &lt;code&gt;openat2&lt;&#x2F;code&gt; and friends, which was both a fun exercise in API design and a fun excuse &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-rust&#x2F;nix&#x2F;pull&#x2F;2339&quot;&gt;to contribute openat2 bindings to the &lt;code&gt;nix&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust reading list</title>
        <published>2024-01-30T00:00:00+00:00</published>
        <updated>2024-01-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/rust-reading-list/"/>
        <id>https://blinsay.com/blog/rust-reading-list/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/rust-reading-list/">&lt;p&gt;Rust has a reputation as a hard programming language to learn, despite &lt;a href=&quot;https:&#x2F;&#x2F;opensource.googleblog.com&#x2F;2023&#x2F;06&#x2F;rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html&quot;&gt;evidence
to the contrary&lt;&#x2F;a&gt;. My experience coming to Rust was deeply pleasant,
and hopefully the things on your reading list make your experience just as
pleasant. If you are someone who understands the difference between a move- and
copy-constructors and have used &lt;code&gt;unique_ptr&lt;&#x2F;code&gt; and &lt;code&gt;shared_ptr&lt;&#x2F;code&gt; in anger, you&#x27;re
starting your Rust journey ahead of everyone else. However, you still have
things to (un)learn. The compiler will tell you that patterns from your past
life are wrong and you&#x27;re going to have to live with it. Find new ways to do
things, instead of brute-forcing your way through with &lt;code&gt;unsafe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;&lt;strong&gt;The Rust Programming Language&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: The
Book. This is a great place to start, even if you&#x27;re a C++ veteran. It does an
excellent job covering the breadth of the language and introduces you to &lt;code&gt;cargo&lt;&#x2F;code&gt;
and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt; ecosystem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;&quot;&gt;&lt;strong&gt;Learn Rust With Entirely Too Many Linked Lists&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
A tour through everyone&#x27;s favorite data structure, by one of the authors of
Rust&#x27;s standard library collections. Starts off basic and veers into advanced
territory quite quickly. It&#x27;s worth reading while you&#x27;re new to the language,
and worth coming back to as you get more comfortable.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Once you&#x27;re through the basics, here are some good resources that have shaped
how I think about building in Rust. A lot of the advice here is about how to
lean on the type system and borrow checker, but some of it is just community
standards.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;rust-typestate&#x2F;&quot;&gt;&lt;strong&gt;The Typestate Pattern in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
A very high-quality, straightforward demonstration of how to use the type
system to help you design an API.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;rust-error-handling&quot;&gt;&lt;strong&gt;Rust Error Handling&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
A long read on error handling from Andrew Gallant, the author of &lt;code&gt;ripgrep&lt;&#x2F;code&gt;
and the &lt;code&gt;regex&lt;&#x2F;code&gt; crate. This post walks through idiomatic error handling
and motivates the &lt;code&gt;?&lt;&#x2F;code&gt; operator. Error API design is one of the most subtle,
difficult parts of Rust to get right. Andrew&#x27;s blog in general is excellent
(I like his [bstr] (https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;bstr&#x2F;) and [csv](https:&#x2F;&#x2F;
blog.burntsushi.net&#x2F;csv&#x2F;) posts too).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mmapped.blog&#x2F;posts&#x2F;12-rust-error-handling.html&quot;&gt;&lt;strong&gt;Designing error types in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
This post builds on Andrew Gallant&#x27;s post on errors with a focus on what you
want to represent in an error API. This post is also where you&#x27;ll really start
noticing that Rust is secretly an ML-style language. Lean into the functional
programming, and follow the links to [&lt;strong&gt;Parse, Don&#x27;t Validate&lt;&#x2F;strong&gt;](&amp;lt;https:&#x2F;&#x2F;
lexi-lambda.github.io&#x2F;blog&#x2F;2019&#x2F;11&#x2F;05&#x2F; parse-don-t-validate&#x2F;&amp;gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sled.rs&#x2F;apis.html&quot;&gt;&lt;strong&gt;Writing APIs in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: A value statement by
the sled.rs author that I happen to strongly agree with. Short, direct, and to
the point.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;about.html&quot;&gt;&lt;strong&gt;Rust API Guidelines&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: 
Straight from the Rust Library team, guidelines on how to write APIs. I treat
this as less of a learning tool and more of a resource, but it&#x27;s good to know
that it&#x27;s here.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Async Rust is a lot. It can feel like it&#x27;s own sub-language and a completely separate ecosystem. There&#x27;s a lot to learn here. If you can, try to have a solid grasp on the fundamentals of Rust and the posts above before diving into async.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;async-book&#x2F;&quot;&gt;&lt;strong&gt;Asynchronous Programming in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
The async version of The Book. This is still incomplete, but a good place to
start. You&#x27;ll get a basic tour of what Rust Futures are and learn what the hell
is going on with &lt;code&gt;await&lt;&#x2F;code&gt; and &lt;code&gt;Pin&lt;&#x2F;code&gt;. After reading this book, [read the module
documentation for &lt;code&gt;std::pin&lt;&#x2F;code&gt;](https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;pin&#x2F; index.html).
You will return to it many, many times.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;async-inversion&#x2F;&quot;&gt;&lt;strong&gt;How to think about async&#x2F;await in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:
A higher-level explanation of what async is and what it allows you to do at
a high level. Since most of the async documentation is how-to, this is a nice
change of pace.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Bug</title>
        <published>2018-08-07T00:00:00+00:00</published>
        <updated>2018-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/an-bug/"/>
        <id>https://blinsay.com/blog/an-bug/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/an-bug/">&lt;p&gt;An Bug is &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;44984049&quot;&gt;a talk by Joe Damato&lt;&#x2F;a&gt; from 2012 that has remained one of my favorite talks about software, ever. It inspired a short-lived podcast series that I hosted on on &lt;a href=&quot;https:&#x2F;&#x2F;www.producthunt.com&#x2F;products&#x2F;bumpers&quot;&gt;bumpers.fm&lt;&#x2F;a&gt; (rip) about debugging software in production.&lt;&#x2F;p&gt;
&lt;p&gt;Grab a shovel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;br &#x2F;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;intro.m4a&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;jeff-hodges.m4a&quot;&gt;Jeff&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;zac-duncan.m4a&quot;&gt;Zac&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;caitie-mccaffrey.m4a&quot;&gt;Caitie&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;cliff-moon.m4a&quot;&gt;Cliff&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
