<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Ben Linsay</title>
    <link rel="self" type="application/atom+xml" href="https://blinsay.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blinsay.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-05-28T00:00:00+00:00</updated>
    <id>https://blinsay.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Implementing CVM For Fun and Fun</title>
        <published>2024-05-28T00:00:00+00:00</published>
        <updated>2024-05-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/cvm/"/>
        <id>https://blinsay.com/blog/cvm/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/cvm/">&lt;p&gt;There&#x27;s been a new Knuth paper about an distinct-values sketch floating around my corner of the internet. Despite having not interacted with a sketch professionally in quite a long time, sketches are still &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y3fTaxA8PkU&quot;&gt;near and dear to my heart&lt;&#x2F;a&gt; and this felt like a fun opportunity to implement something new.&lt;&#x2F;p&gt;
&lt;p&gt;For the unfamiliar, probabilistic sketching is cheating at data structures by using statistics. In return for accepting some amount of error, and usually a bounded amount, you get to break the fundamental laws of computer science. A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bloom_filter&quot;&gt;Bloom filter&lt;&#x2F;a&gt; is the most famous example, but sketches like HyperLogLog and CountMinSketch have been showing up in industry with some regularity.&lt;&#x2F;p&gt;
&lt;p&gt;The sketch in Knuth&#x27;s note is a sketch that, like &lt;a href=&quot;https:&#x2F;&#x2F;dmtcs.episciences.org&#x2F;3545&#x2F;pdf&quot;&gt;HyperLogLog&lt;&#x2F;a&gt;, gives an estimator for the distinct element problem, aka the &amp;quot;how big is my set&amp;quot; problem. The new algorithm is interesting in that it doesn&#x27;t solve the problem with tighter bounds or while using less space or really offer any improvement over HLLs and other state-of-the-art sketches. It&#x27;s intended as a teaching tool, and is an algorithm that students can implement and can write coherent proofs about without the &lt;a href=&quot;https:&#x2F;&#x2F;mathworld.wolfram.com&#x2F;MellinTransform.html&quot;&gt;graduate level math skills&lt;&#x2F;a&gt; that are table stakes for proving meaningful bounds on other sketches.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What Knuth calls CVM was originally proposed by &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2301.10191&quot;&gt;Sourav Chakraborty, N. V. Vinodchandran, and Kuldeep S. Meel&lt;&#x2F;a&gt; in a paper that explicitly targets teaching. The original paper doesn&#x27;t even focus on implementation and data structures, it aims itself directly at students looking to write proofs about the algorithm. The paper works through three verisons of this algorithm and spends most of it&#x27;s time on proving properties of each iteration, and building on the proofs from previous iterations to prove things about the next.&lt;&#x2F;p&gt;
&lt;p&gt;All three versions of the algorithm work by keeping a set of elements seen in the stream until it hits some predetermined size threshold. At that point, the algorithm randomly discards elements of the set with some probability. The first iteration of the algorithm discards every element with probability 1&#x2F;2 and terminates if the set is ever empty. The second iteration simply removes the termination condition. The third and final iteration introduces randomness, and uses that randomness to discard from the set of observed elements.&lt;&#x2F;p&gt;
&lt;p&gt;On its own, this paper would have been deeply unapproachable to anyone who was not a student of probability theory - it&#x27;s &lt;em&gt;very&lt;&#x2F;em&gt; focused on the math. As someone who&#x27;s been away from that kind of math for more than a decade, I absolutely can&#x27;t follow the proofs here. Implementation and data structures are clearly an afterthought - the third iteration of the algorithm depends on keeping around an infinitely growing string of random bits.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www-cs-faculty.stanford.edu&#x2F;~knuth&#x2F;papers&#x2F;cvm-note.pdf&quot;&gt;Along comes Donald Knuth&lt;&#x2F;a&gt;, with a celebration of this algorithm.&lt;&#x2F;p&gt;
&lt;p&gt;Knuth makes the whole thing much more approachable to the lay programmer. Knuth starts at the end with what alternately calls Algorithm D and CVM (named after the three original authors), and focuses on the algorithm and intuitive proof that it works before diving in. Knuth being Knuth, he also spends plenty of time on the data structures required to make CVM fast and efficient. After laying out the algorithm Knuth dives into proofs as well, building back up from simpler algorithms to proofs on the bounds of Algorithm D.&lt;&#x2F;p&gt;
&lt;p&gt;Interestingly, Knuth seems to believe that it&#x27;s possible to prove tighter bounds on Algorithm D.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To conclude this study, I had hoped to use Theorem D to sharpen the results of Corollary T, because the actual performance of Algorithm D in practice is noticeably better than the comparatively weak theoretical guarantees that are derivable from the coarser Algorithm D. Algorithm D is quite simple, so I believed that I’d be able to analyze its behavior without great difficulty. Alas, after several weeks of trying, I must confess that I’ve failed to get much further. Indeed, I think Algorithm D may well be the simplest algorithm that lies beyond my current ability to carry out a sharp
analysis!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Watch out, undergraduates.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;At an extremely high level, Knuth&#x27;s CVM works by keeping a set of elements seen so far paired with a randomly sampled value he dubs a &amp;quot;volatility&amp;quot;. Each (non-distinct) element in the stream is assigned a volatility, and is sampled if it has a lower volatility than any other element sampled so far, evicting the element paired with the highest volatility. On considering a new element, CVM updates a probability parameter &lt;code&gt;p&lt;&#x2F;code&gt; based on both the new incoming volatility and whether or not an element was evicted. At any point in time, the size of the sampled set divided by &lt;code&gt;p&lt;&#x2F;code&gt; is an unbiased estimator of the number of unique elements in the stream.&lt;&#x2F;p&gt;
&lt;p&gt;The high-level explanation glosses over important details in the algorithm that handle edge cases and correct for sampling bias, but  I found that an actual implementation is as readable and concicse as the pseudocode Knuth presents for Algorithm D.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Cvm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;: Treap,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Cvm {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D1 - p=1, buf is empty
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            size,
&lt;&#x2F;span&gt;&lt;span&gt;            p: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            buf: Treap::new(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; u: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;= rand::thread_rng().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D4 - if B contains the pair (a, u) delete it
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D5 - if u &amp;gt;= p, bail. if there&amp;#39;s room in the
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; buffer, either because the buffer is still growing
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; to its max or the same key just got removed,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; insert the new node.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p &amp;lt;= u {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.size {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key, u);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; D6 - based on the value of u, either swap the new
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; node into the buffer or update the value of p.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(key_max, u_max) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; u_max &amp;lt; u {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p = u
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key_max);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key, u);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;estimate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; at any point, D2 is a valid estimate
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.p
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only step in Knuth&#x27;s algorithm D that it doesn&#x27;t make sense to represent explicitly in code is Step D3 - sampling the next element from a stream. In practice, you&#x27;ll be doing that by processing an incoming stream of data from some external source.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Knuth&#x27;s implementation of the algorithm is &lt;a href=&quot;https:&#x2F;&#x2F;cs.stanford.edu&#x2F;~knuth&#x2F;programs&#x2F;cvm-estimates.w&quot;&gt;available as a literate program&lt;&#x2F;a&gt; alongside his note. If you&#x27;re &lt;a href=&quot;https:&#x2F;&#x2F;tug.org&#x2F;texlive&#x2F;&quot;&gt;feeling adventurous&lt;&#x2F;a&gt;, you can turn it into a stripped C file or a &lt;a href=&quot;https:&#x2F;&#x2F;blinsay.com&#x2F;blog&#x2F;cvm&#x2F;cvm-estimates.pdf&quot;&gt;rendered PDF&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I found Knuth&#x27;s implementation difficult to follow. It freely mixes the CVM implementation with the guts of a hash-table implementation and a all of the treap building and searching code, none of which really matters for the correctness of the CVM algorithm itself. In my reading almost all of the complexity seems to come from the hash table and treap code.&lt;&#x2F;p&gt;
&lt;p&gt;I spent a while staring at the treap implementation before deciding to ignore it entirely. While the treap is extremely important to the implementation of the algorithm if you&#x27;d like it to be fast (and a very cool data structure) it has nothing to do with whether or not the implementation correct.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out it&#x27;s fairly easy to fake a treap with a sorted array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Treap {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Node&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Treap {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ data: Vec::new() }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;k);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| e.vol &amp;lt; v);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(idx, Node { key: k, vol: v });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data[i].key == k {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| (n.key, n.vol))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s certainly not the prettiest or fastest thing in the world, but it lets us go test out CVM on some real data.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To test, I ran my implementation against a stream of random numbers generated by the [&lt;code&gt;rand&lt;&#x2F;code&gt; crate]&#x27;s default RNG and comparing against a &lt;code&gt;HashSet&lt;&#x2F;code&gt; of the actual values. These tests generated elements until the HashSet hit 1,000,000 unique elements.&lt;&#x2F;p&gt;
&lt;p&gt;After 10 trials at each buffer size, my toy implementation appears to the naked eyeball to be close enough to Knuth&#x27;s results for &lt;code&gt;Stream A1&lt;&#x2F;code&gt; - random data - that I&#x27;m happy to call this a working implementation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;blinsay.com&#x2F;blog&#x2F;cvm&#x2F;cvm-results.svg&quot; alt=&quot;cvm-results&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Eyeballing this is as far as I went with analysis because the bounds that Knuth and the original authors prove are hard to comprehend, let alone to do napkin math about. I wouldn&#x27;t believe most practicing software engineers if they told me they could intuit how a change in CVM buffer size (Knuth&#x27;s &lt;code&gt;s&lt;&#x2F;code&gt;) changes the error. Compare that to an algorithm like HyperLogLog and it&#x27;s error bound of &lt;code&gt;1.04&#x2F;sqrt(m)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It really is quite astonishing that this is a good estimator. Given how simple the code is, and Knuth&#x27;s ringing endorsement, I wouldn&#x27;t be the least bit surprised if it makes it into more than a few CS textbooks.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>verytmp</title>
        <published>2024-05-06T00:00:00+00:00</published>
        <updated>2024-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/verytmp/"/>
        <id>https://blinsay.com/blog/verytmp/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/verytmp/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blinsay&#x2F;verytmp&quot;&gt;&lt;code&gt;verytmp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; came out of a previous employer&#x27;s problem with badly behaved programs that weren&#x27;t cleaning up large temporary files. Inevitably, someone who had to work with that code - and usually not the person who wrote the code! - would fill up their tempdir and spend a few minutes or hours being extremely confused about why other programs were suddenly throwing errors.&lt;&#x2F;p&gt;
&lt;p&gt;Our &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;geofft&quot;&gt;local mad scientist&lt;&#x2F;a&gt; realized that this was obviously a problem for linux namespaces, and &lt;code&gt;verytmp&lt;&#x2F;code&gt; was born. By using (abusing?) a private mount namespace, &lt;code&gt;verytmp&lt;&#x2F;code&gt; takes advantage of the fact that &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;212172&#x2F;what-happens-if-the-last-process-in-a-namespace-exits&quot;&gt;mount namespaces are garbage collected&lt;&#x2F;a&gt; to give you a fully-functional in-memory filesystem that gets cleaned up when your process exits without relying on &lt;strong&gt;any&lt;&#x2F;strong&gt; userspace code. No more full &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt;, no more strange errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blinsay&#x2F;verytmp&quot;&gt;The code is here&lt;&#x2F;a&gt;, and was a lot of fun to write. Because the goal is to create a detached mount namespace, you end up with a filesystem you can&#x27;t reference with a absolute paths, which means that your API for accessing files and directories has to look a little bit different than the usual interfaces. Instead you end up with something a lot more like &lt;code&gt;openat2&lt;&#x2F;code&gt; and friends, which was both a fun exercise in API design and a fun excuse &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-rust&#x2F;nix&#x2F;pull&#x2F;2339&quot;&gt;to contribute openat2 bindings to the &lt;code&gt;nix&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust reading list</title>
        <published>2024-01-30T00:00:00+00:00</published>
        <updated>2024-01-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/rust-reading-list/"/>
        <id>https://blinsay.com/blog/rust-reading-list/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/rust-reading-list/">&lt;p&gt;Rust has a reputation as a hard programming language to learn, despite &lt;a href=&quot;https:&#x2F;&#x2F;opensource.googleblog.com&#x2F;2023&#x2F;06&#x2F;rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html&quot;&gt;evidence to the contrary&lt;&#x2F;a&gt;. My experience coming to Rust was deeply pleasant, and hopefully the things on your reading list make your experience just as pleasant.&lt;&#x2F;p&gt;
&lt;p&gt;If you are someone who understands the difference between a move- and copy-constructors and have used &lt;code&gt;unique_ptr&lt;&#x2F;code&gt; and &lt;code&gt;shared_ptr&lt;&#x2F;code&gt; in anger, you&#x27;re starting your Rust journey ahead of everyone else. However, you still have things to (un)learn. The compiler will tell you that patterns from your past life are wrong and you&#x27;re going to have to live with it. Find new ways to do things, instead of brute-forcing your way through with &lt;code&gt;unsafe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;%22&quot;&gt;&lt;strong&gt;The Rust Programming Language&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - The Book. This is a great place to start, even if you&#x27;re a C++ veteran. It does an excellent job covering the breadth of the language and introduces you to &lt;code&gt;cargo&lt;&#x2F;code&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt; ecosystem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;&quot;&gt;&lt;strong&gt;Learn Rust With Entirely Too Many Linked Lists&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - A tour through everyone&#x27;s favorite data structure, by one of the authors of Rust&#x27;s standard library collections. Starts off basic and veers into advanced territory quite quickly. It&#x27;s worth reading while you&#x27;re new to the language, and worth coming back to as you get more comfortable.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;rust-typestate&#x2F;&quot;&gt;&lt;strong&gt;The Typestate Pattern in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - A very high-quality, straightforward demonstration of how to use the type system to help you design an API.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;rust-error-handling&quot;&gt;&lt;strong&gt;Rust Error Handling&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - A long read on error handling from Andrew Gallant, the author of &lt;code&gt;ripgrep&lt;&#x2F;code&gt; and the &lt;code&gt;regex&lt;&#x2F;code&gt; crate. This post walks through idiomatic error handling and motivates the &lt;code&gt;?&lt;&#x2F;code&gt; operator. Error API design is one of the most subtle, difficult parts of Rust to get right. Andrew&#x27;s blog in general is excellent (I like his &lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;bstr&#x2F;&quot;&gt;bstr&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;csv&#x2F;&quot;&gt;csv&lt;&#x2F;a&gt; posts too).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mmapped.blog&#x2F;posts&#x2F;12-rust-error-handling.html&quot;&gt;&lt;strong&gt;Designing error types in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - This post builds on Andrew Gallant&#x27;s post on errors with a focus on what you want to represent in an error API. This post is also where you&#x27;ll really start noticing that Rust is secretly an ML-style language. Lean into the functional programming, and follow the links to &lt;a href=&quot;https:&#x2F;&#x2F;lexi-lambda.github.io&#x2F;blog&#x2F;2019&#x2F;11&#x2F;05&#x2F;parse-don-t-validate&#x2F;&quot;&gt;&lt;strong&gt;Parse, Don&#x27;t Validate&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Async Rust is a lot. It can feel like it&#x27;s own sub-language and a completely separate ecosystem. There&#x27;s a lot to learn here. If you can, try to have a solid grasp on the fundamentals of Rust and the posts above before diving into async.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;async-book&#x2F;%22&quot;&gt;&lt;strong&gt;Asynchronous Programming in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - The async version of The Book. This is still incomplete, but a good place to start. You&#x27;ll get a basic tour of what Rust Futures are and learn what the hell is going on with &lt;code&gt;await&lt;&#x2F;code&gt; and &lt;code&gt;Pin&lt;&#x2F;code&gt;. After reading this book, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;pin&#x2F;index.html&quot;&gt;read the module documentation for &lt;code&gt;std::pin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. You will return to it many, many times.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;async-inversion&#x2F;&quot;&gt;&lt;strong&gt;How to think about async&#x2F;await in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - A higher-level explanation of what async is and what it allows you to do at a high level. Since most of the async documentation is how-to, this is a nice change of pace.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Bug</title>
        <published>2018-08-07T00:00:00+00:00</published>
        <updated>2018-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Ben Linsay
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blinsay.com/blog/an-bug/"/>
        <id>https://blinsay.com/blog/an-bug/</id>
        
        <content type="html" xml:base="https://blinsay.com/blog/an-bug/">&lt;p&gt;An Bug is &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;44984049&quot;&gt;a talk by Joe Damato&lt;&#x2F;a&gt; from 2012 that has remained one of my favorite talks about software, ever. It inspired a short-lived podcast series that I hosted on on &lt;a href=&quot;https:&#x2F;&#x2F;www.producthunt.com&#x2F;products&#x2F;bumpers&quot;&gt;bumpers.fm&lt;&#x2F;a&gt; (rip) about debugging software in production.&lt;&#x2F;p&gt;
&lt;p&gt;Grab a shovel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;br &#x2F;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;intro.m4a&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;jeff-hodges.m4a&quot;&gt;Jeff&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;zac-duncan.m4a&quot;&gt;Zac&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;caitie-mccaffrey.m4a&quot;&gt;Caitie&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;audio&#x2F;cliff-moon.m4a&quot;&gt;Cliff&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
